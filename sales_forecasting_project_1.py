# -*- coding: utf-8 -*-
"""sales forecasting project 1.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1dY1sGr04n75mboJzjyEG3lJlNS4Ox6aw

# 1. Pendahuluan

# Analisis Penjualan Berdasarkan Kategori Produk

Notebook ini bertujuan untuk menganalisis data penjualan berdasarkan kategori produk dan melihat kontribusinya terhadap total penjualan. Selain itu, notebook ini juga menyertakan model prediksi penjualan sebagai bagian opsional.

# 2. Import Library
"""

# Import libraries
import pandas as pd
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns

"""# Load Dataset"""

# Load dataset
df = pd.read_csv("/content/store5.csv")
df.head()

"""# ðŸ“Œ 3. Eksplorasi Awal

Cek tipe data, missing value, dan statistik dasar.
"""

# Cek tipe data dan missing value
print(df.info())
print("\nMissing values:")
print(df.isnull().sum())

# Statistik deskriptif
df.describe()

"""# ðŸ“Œ 4. Analisis Penjualan per Kategori"""

# Total penjualan per kategori
kategori = df.groupby("family")["sales"].agg(['sum', 'mean', 'count']).sort_values(by='sum', ascending=False)
kategori["persentase"] = (kategori["sum"] / kategori["sum"].sum()) * 100
kategori.reset_index(inplace=True)
kategori.head()

"""# ðŸ“Œ 5. Visualisasi Penjualan"""

# Barplot total penjualan
plt.figure(figsize=(10,6))
sns.barplot(data=kategori, x='sum', y='family', palette='rocket')
plt.title("Total Penjualan per Kategori")
plt.xlabel("Total Penjualan")
plt.ylabel("Kategori Produk")
plt.tight_layout()
plt.show()

# Pie chart kontribusi
plt.figure(figsize=(8,8))
plt.pie(kategori["sum"], labels=kategori["family"], autopct='%1.1f%%',
        startangle=90, colors=sns.color_palette("rocket", len(kategori)))
plt.title("Kontribusi Penjualan per Kategori")
plt.tight_layout()
plt.show()

"""# ðŸ“Œ 5. Analisis Autokorelasi Penjualan"""

from statsmodels.graphics.tsaplots import plot_acf, plot_pacf

# Ubah kolom tanggal
df["date"] = pd.to_datetime(df["date"])
penjualan_harian = df.groupby("date")["sales"].sum()

# Autokorelasi dan partial autocorrelation
plt.figure(figsize=(12,4))
plot_acf(penjualan_harian, lags=30)
plt.title("Autokorelasi Penjualan Harian")
plt.show()

plt.figure(figsize=(12,4))
plot_pacf(penjualan_harian, lags=30)
plt.title("Partial Autokorelasi Penjualan Harian")
plt.show()

"""# ðŸ“Œ 6. Prediksi Penjualan dengan Regresi Linear"""

from sklearn.linear_model import LinearRegression
from sklearn.model_selection import train_test_split
from sklearn.metrics import mean_squared_error, r2_score

# Salin data untuk modeling
df_model = df.copy()

# Ekstrak fitur waktu
df_model["year"] = df_model["date"].dt.year
df_model["month"] = df_model["date"].dt.month

# Isi missing value
df_model["dcoilwtico"].fillna(method="ffill", inplace=True)

# Encoding kolom 'family'
df_model = pd.get_dummies(df_model, columns=["family"], drop_first=True)

# Tentukan fitur dan target
fitur = ["store_nbr", "onpromotion", "dcoilwtico", "year", "month"] + \
        [col for col in df_model.columns if col.startswith("family_")]

X = df_model[fitur].fillna(0)
y = df_model["sales"]

# Split data training dan testing
X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.2, random_state=42)

# Buat model regresi
model = LinearRegression()
model.fit(X_train, y_train)
y_pred = model.predict(X_test)

# Evaluasi hasil
print("Mean Squared Error (MSE):", mean_squared_error(y_test, y_pred))
print("R-squared (RÂ²):", r2_score(y_test, y_pred))

"""## ðŸ“Œ Kesimpulan

- Kategori produk seperti *Grocery I* memiliki kontribusi terbesar terhadap total penjualan.
- Terdapat **autokorelasi** pada penjualan harian, menunjukkan adanya pola waktu (musiman).
- Model **regresi linear** mampu memberikan prediksi awal terhadap tren penjualan meski belum sangat akurat.
- Notebook ini bisa dikembangkan dengan model time series seperti ARIMA, Prophet, atau LSTM untuk forecasting yang lebih kompleks.
"""